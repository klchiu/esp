#ifndef __CORDIC_CONST_HPP__
#define __CORDIC_CONST_HPP__

#include "esp_templates.hpp"


#define CORDIC_PI 3.14159265358979323846
#define SC_FIXED_PI sc_ufixed<64,2>(CORDIC_PI)


#define ATAN_N 129
// Precomputed atan values for negative powers of 2
// For index i into the array [0, ATAN_N - 1], the stored value is atan(2^-i)
#define	DEFINE_ATAN_TABLE const sc_ufixed<64, 0> atan_table[ATAN_N] = \
	{ 0.7853981633974482789994908671360462903976, 0.4636476090008060935154787784995278343558, 0.2449786631268641434733268624768243171275, 0.1243549945467614381566789916178095154464 \
	, 0.0624188099959573500230547438150097150356, 0.0312398334302682774421544564802388777025, 0.0156237286204768312941615349132007395383 \
	, 0.0078123410601011111439873069173245312413, 0.0039062301319669717573901390750279460917, 0.0019531225164788187584341550007138721412 \
	, 0.0009765621895593194594364927496599193546, 0.0004882812111948982899262139412144279049, 0.0002441406201493617712447448120371973346 \
	, 0.0001220703118936702078530659454358442417, 0.0000610351561742087725935014541622791739, 0.0000305175781155260957271547345159845577 \
	, 0.0000152587890613157615423778681873479002, 0.0000076293945311019699810389967098434028, 0.0000038146972656064961417507561819428830 \
	, 0.0000019073486328101869647792853193490892, 0.0000009536743164059608441276310632217506, 0.0000004768371582030888422810640820542760 \
	, 0.0000002384185791015579736676881098325631, 0.0000001192092895507806808997385635169597, 0.0000000596046447753905522081060953335646 \
	, 0.0000000298023223876953025738326493636679, 0.0000000149011611938476545956387748939447, 0.0000000074505805969238281250000000000000 \
	, 0.0000000037252902984619140625000000000000, 0.0000000018626451492309570312500000000000, 0.0000000009313225746154785156250000000000 \
	, 0.0000000004656612873077392578125000000000, 0.0000000002328306436538696289062500000000, 0.0000000001164153218269348144531250000000 \
	, 0.0000000000582076609134674072265625000000, 0.0000000000291038304567337036132812500000, 0.0000000000145519152283668518066406250000 \
	, 0.0000000000072759576141834259033203125000, 0.0000000000036379788070917129516601562500, 0.0000000000018189894035458564758300781250 \
	, 0.0000000000009094947017729282379150390625, 0.0000000000004547473508864641189575195312, 0.0000000000002273736754432320594787597656 \
	, 0.0000000000001136868377216160297393798828, 0.0000000000000568434188608080148696899414, 0.0000000000000284217094304040074348449707 \
	, 0.0000000000000142108547152020037174224854, 0.0000000000000071054273576010018587112427, 0.0000000000000035527136788005009293556213 \
	, 0.0000000000000017763568394002504646778107, 0.0000000000000008881784197001252323389053, 0.0000000000000004440892098500626161694527 \
	, 0.0000000000000002220446049250313080847263, 0.0000000000000001110223024625156540423632, 0.0000000000000000555111512312578270211816 \
	, 0.0000000000000000277555756156289135105908, 0.0000000000000000138777878078144567552954, 0.0000000000000000069388939039072283776477 \
	, 0.0000000000000000034694469519536141888238, 0.0000000000000000017347234759768070944119, 0.0000000000000000008673617379884035472060 \
	, 0.0000000000000000004336808689942017736030, 0.0000000000000000002168404344971008868015, 0.0000000000000000001084202172485504434007 \
	, 0.0000000000000000000542101086242752217004, 0.0000000000000000000271050543121376108502, 0.0000000000000000000135525271560688054251 \
	, 0.0000000000000000000067762635780344027125, 0.0000000000000000000033881317890172013563, 0.0000000000000000000016940658945086006781 \
	, 0.0000000000000000000008470329472543003391, 0.0000000000000000000004235164736271501695, 0.0000000000000000000002117582368135750848 \
	, 0.0000000000000000000001058791184067875424, 0.0000000000000000000000529395592033937712, 0.0000000000000000000000264697796016968856 \
	, 0.0000000000000000000000132348898008484428, 0.0000000000000000000000066174449004242214, 0.0000000000000000000000033087224502121107 \
	, 0.0000000000000000000000016543612251060553, 0.0000000000000000000000008271806125530277, 0.0000000000000000000000004135903062765138 \
	, 0.0000000000000000000000002067951531382569, 0.0000000000000000000000001033975765691285, 0.0000000000000000000000000516987882845642 \
	, 0.0000000000000000000000000258493941422821, 0.0000000000000000000000000129246970711411, 0.0000000000000000000000000064623485355705 \
	, 0.0000000000000000000000000032311742677853, 0.0000000000000000000000000016155871338926, 0.0000000000000000000000000008077935669463 \
	, 0.0000000000000000000000000004038967834732, 0.0000000000000000000000000002019483917366, 0.0000000000000000000000000001009741958683 \
	, 0.0000000000000000000000000000504870979341, 0.0000000000000000000000000000252435489671, 0.0000000000000000000000000000126217744835 \
	, 0.0000000000000000000000000000063108872418, 0.0000000000000000000000000000031554436209, 0.0000000000000000000000000000015777218104 \
	, 0.0000000000000000000000000000007888609052, 0.0000000000000000000000000000003944304526, 0.0000000000000000000000000000001972152263 \
	, 0.0000000000000000000000000000000986076132, 0.0000000000000000000000000000000493038066, 0.0000000000000000000000000000000246519033 \
	, 0.0000000000000000000000000000000123259516, 0.0000000000000000000000000000000061629758, 0.0000000000000000000000000000000030814879 \
	, 0.0000000000000000000000000000000015407440, 0.0000000000000000000000000000000007703720, 0.0000000000000000000000000000000003851860 \
	, 0.0000000000000000000000000000000001925930, 0.0000000000000000000000000000000000962965, 0.0000000000000000000000000000000000481482 \
	, 0.0000000000000000000000000000000000240741, 0.0000000000000000000000000000000000120371, 0.0000000000000000000000000000000000060185 \
	, 0.0000000000000000000000000000000000030093, 0.0000000000000000000000000000000000015046, 0.0000000000000000000000000000000000007523 \
	, 0.0000000000000000000000000000000000003762, 0.0000000000000000000000000000000000001881, 0.0000000000000000000000000000000000000940 \
	, 0.0000000000000000000000000000000000000470, 0.0000000000000000000000000000000000000235, 0.0000000000000000000000000000000000000118 \
	, 0.0000000000000000000000000000000000000059, 0.0000000000000000000000000000000000000029}

#define K_N 26
// Precomputed gain values for each trigometric CORDIC iteration
// For index i into the array [0, K_N - 1], the stored value is cos(atan(2^-i)) === 1/sqrt(1+2^(-2i))
// Larger indicies can assume a result value of 1 (if not much earlier)
#define DEFINE_K_TABLE	const sc_ufixed<64, 0> k_table[K_N] = \
	{ 0.70710678118654746172, 0.89442719099991585541, 0.97014250014533187638, 0.99227787671366773914 \
	, 0.99805257848288853051, 0.99951207608707881569, 0.99987795203469531646, 0.99996948381878780765 \
	, 0.99999237069277913115, 0.99999809265682415571, 0.99999952316318285739, 0.99999988079073176550 \
	, 0.99999997019767894457, 0.99999999254941940308, 0.99999999813735485077, 0.99999999953433871269 \
	, 0.99999999988358467817, 0.99999999997089616954, 0.99999999999272404239, 0.99999999999818101060 \
	, 0.99999999999954525265, 0.99999999999988631316, 0.99999999999997157829, 0.99999999999999289457 \
	, 0.99999999999999822364, 0.99999999999999955591}

#define A_N 26
#define DEFINE_A_TABLE	const sc_ufixed<64, 1> a_table[A_N] = \
	{ 1.41421356237309514547, 1.58113883008418976139, 1.62980060130066228830, 1.64248406575223726556 \
	, 1.64568891575725495535, 1.64649227871247871846, 1.64669325427364365844, 1.64674350659690094112 \
	, 1.64675607020487846377, 1.64675921113982215438, 1.64675999637561742972, 1.64676019268469486789 \
	, 1.64676024176197222104, 1.64676025403129222546, 1.64676025709862217106, 1.64676025786545476848 \
	, 1.64676025805716297334, 1.64676025810508996905, 1.64676025811707171798, 1.64676025812006709970 \
	, 1.64676025812081605615, 1.64676025812100323975, 1.64676025812105009116, 1.64676025812106185953 \
	, 1.64676025812106474611, 1.64676025812106541224}

#define INV_A_N 26
	// Precomputed inverse gain of CORDIC rotation algorithm
	// Index i into the array [0, INV_A_N - 1] contains the inverse of the gain after i + 1 iterations 
	// of the CORDIC rotation algorithm. Value is equal to series product from 0 to i of sqrt(1 + 2^(-2*i))
#define DEFINE_INV_A_TABLE	const sc_ufixed<64, 0> inv_a_table[INV_A_N] = \
	{ 0.70710678118654746172, 0.63245553203367577133, 0.61357199107789628378, 0.60883391251775242914 \
	, 0.60764825625616825100, 0.60735177014129604345, 0.60727764409352613661, 0.60725911229889284471 \
	, 0.60725447933256249122, 0.60725332108987528645, 0.60725303152913445714, 0.60725295913894494770 \
	, 0.60725294104139726503, 0.60725293651701028885, 0.60725293538591351705, 0.60725293510313937961 \
	, 0.60725293503244581750, 0.60725293501477239921, 0.60725293501035404464, 0.60725293500924948376 \
	, 0.60725293500897337129, 0.60725293500890431542, 0.60725293500888710696, 0.60725293500888277709 \
	, 0.60725293500888166687, 0.60725293500888144482}


#define ATANH_N 32
// For each index into atanh_table array, the value is atanh(2^-(i+1))
#define DEFINE_ATANH_TABLE const sc_ufixed<64, 0> atanh_table[ATANH_N] = \
		{ 0.549306144334054780,	0.255412811882995361, 0.125657214140453027,	0.062581571477003009 \
		, 0.031260178490666993, 0.015626271752052209, 0.007812658951540421, 0.003906269868396826 \
		, 0.001953127483532550, 0.000976562810441036, 0.000488281288805113, 0.000244140629850639 \
		, 0.000122070313106330, 0.000061035156325791, 0.000030517578134474, 0.000015258789063684 \
		, 0.000007629394531398, 0.000003814697265644, 0.000001907348632815, 0.000000953674316407 \
		, 0.000000476837158203, 0.000000238418579102, 0.000000119209289551, 0.000000059604644775 \
		, 0.000000029802322388, 0.000000014901161194, 0.000000007450580597, 0.000000003725290298 \
		, 0.000000001862645149, 0.000000000931322575, 0.000000000465661287, 0.000000000232830644}


#define AH_N 26
// Precomputed gain of hyperbolic CORDIC rotation algorithm
// Index i into the array [1, INV_A_N] contains the inverse of the gain after i iterations 
// of the hyperbolic CORDIC rotation algorithm. Value is equal to series product from 1 to i of sqrt(1 - 2^(-2*i))
#define DEFINE_AH_TABLE	const sc_ufixed<64, 0> ah_table[AH_N] = \
{0.86602540378443859659, 0.83852549156242106587, 0.83194871949838344882, 0.83032222973252267639 \
	, 0.82991669992580241466, 0.82981538555077738462, 0.82979006120849485573, 0.82978373038858954658 \
	, 0.82978214770021652136, 0.82978175202916093500, 0.82978165311146190319, 0.82978162838204116980 \
	, 0.82978162219968631952, 0.82978162065409755144, 0.82978162026770041493, 0.82978162017110113080 \
	, 0.82978162014695133752, 0.82978162014091383369, 0.82978162013940448549, 0.82978162013902712069 \
	, 0.82978162013893275173, 0.82978162013890921500, 0.82978162013890333082, 0.82978162013890188753 \
	, 0.82978162013890155446, 0.82978162013890144344}

#define INV_AH_N 26
#define DEFINE_INV_AH_TABLE const sc_ufixed<64,1> inv_ah_table[INV_AH_N] = \
{1.15470053837925168416, 1.19256958799988788122, 1.20199716228055697442, 1.20435171333680512973 \
	, 1.20494020675738133797, 1.20508732112295691152, 1.20512409915299989471, 1.20513329362543397671 \
	, 1.20513559224135025083, 1.20513616689519231784, 1.20513631055864434138, 1.20513634647450684767 \
	, 1.20513635545347219669, 1.20513635769821370047, 1.20513635825939902091, 1.20513635839969524000 \
	, 1.20513635843476940579, 1.20513635844353794724, 1.20513635844572997158, 1.20513635844627819971 \
	, 1.20513635844641520123, 1.20513635844644939610, 1.20513635844645783379, 1.20513635844646005424 \
	, 1.20513635844646049833, 1.20513635844646072037}


#define Z_INIT_CONSTANGLE_N 18
#define X_INIT_CONSTANGLE_N 25
#define Y_INIT_CONSTANGLE_N 25
#define DEFINE_CONSTANGLE_INIT_TABLES	const sc_ufixed<64, 0> z_init_constangle_table[Z_INIT_CONSTANGLE_N] = \
	{ 0.92729521800161218703, 0.95360493525453438046, 0.95733626122119319657, 0.95781888666634651397 \
	, 0.95787974353092564250, 0.95788736734161095132, 0.95788832084133634925, 0.95788844004516926489 \
	, 0.95788845494615992848, 0.95788845680879974864, 0.95788845704163028127, 0.95788845707073400071 \
	, 0.95788845707437209054, 0.95788845707482672687, 0.95788845707488368131, 0.95788845707489067571 \
	, 0.95788845707489167491, 0.95788845707489178594}; \
\
	const sc_ufixed<64, 0> x_init_constangle_table[X_INIT_CONSTANGLE_N] = \
	{ 0.53665631459994955765, 0.50219141183993654121, 0.49568994384248377116, 0.49438545106377046467 \
	, 0.49410147279065730341, 0.49403581302768745376, 0.49402006713158869156, 0.49401621436362008755 \
	, 0.49401526163768705313, 0.49401502476457676005, 0.49401496570985115042, 0.49401495096661407480 \
	, 0.49401494728336026174, 0.49401494636286630291, 0.49401494613278268409, 0.49401494607526685865 \
	, 0.49401494606088847128, 0.49401494605729395770, 0.49401494605639534319, 0.49401494605617068956 \
	, 0.49401494605611456779, 0.49401494605610052346, 0.49401494605609702626, 0.49401494605609619359 \
	, 0.49401494605609597155}; \
\
	const sc_ufixed<64, 0> y_init_constangle_table[Y_INIT_CONSTANGLE_N] = \
	{ 0.71554175279993259551, 0.70763335304718322227, 0.70402339850091899542, 0.70289105303652554824 \
	, 0.70257816645098958297, 0.70249618467123253751, 0.70247521821867797698, 0.70246991770805422561 \
	, 0.70246858521816735177, 0.70246825117545508288, 0.70246816754975072161, 0.70246814662894652148 \
	, 0.70246814139694824242, 0.70246814008872393575, 0.70246813976163990922, 0.70246813967986532212 \
	, 0.70246813965942134228, 0.70246813965431020854, 0.70246813965303245286, 0.70246813965271304170 \
	, 0.70246813965263310564, 0.70246813965261323265, 0.70246813965260823664, 0.70246813965260701540 \
	, 0.70246813965260679336}

#define XP_N24_CONSTANGLE_N 24

#define DEFINE_XP_N24_CONSTANGLE_TABLE const sc_ufixed<64, 24> xp_n24_constangle_table[XP_N24_CONSTANGLE_N] = \
	{ 0.98802989209070801735, 3.38099606335163116455, 7.67291346006095409393, 15.83412374556064605713 \
	, 31.91676576435565948486, 63.95834571123123168945, 127.97916817665100097656, 255.98958343267440795898 \
	, 511.99479138851165771484, 1023.99739503860473632812, 2047.99869585037231445312, 4095.99934482574462890625 \
	, 8191.99966621398925781250, 16383.99982070922851562500, 32767.99988555908203125000, 65535.99989318847656250000 \
	, 131071.99984741210937500000, 262143.99969482421875000000, 524287.99938964843750000000, 1048575.99877929687500000000 \
	, 2097151.99755859375000000000, 4194303.99511718750000000000, 8388607.99023437500000000000, 16777215.98046875000000000000} 
		


#endif // __CORDIC_CONST_HPP__
